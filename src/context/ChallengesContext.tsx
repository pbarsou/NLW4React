import { createContext, ReactNode, useEffect, useState } from 'react'; /* importa√ß√£o do 'createContext' 
necess√°rio para a cria√ß√£o de contextos e do 'useState' para o gerenciamento de estado */

import challenges from '../../challenges.json'; // importa√ß√£o do arquivo json dos desafios

import Cookies from 'js-cookie'; // importa√ß√£o de 'Cookies' da biblioteca 'js-cookie' que instalamos
import { LevelUpModal } from '../components/LevelUpModal'; // importa√ß√£o do 'LevelUpModal'

// ________________________________________________________________________________________________

/* Uma boa pr√°tica √© fazermos uma tipagem do 'children', √© informar qual o tipo dele. 
Quando usamos o typescript √© interessante fazermos isso */

interface ChallengesProviderProps {  
  children: ReactNode; /* quando um children de um componente, tamb√©m √© um componente React, 
  podemos utilizar o 'ReactNode', que aceita qualquer elemento como filho. */

  // ChallengesProviderProps agora recebe tamb√©m:
  level: number; 
  currentExperience: number; 
  challengesCompleted: number; 
  // pois s√£o informa√ß√µes provindas dos 'cookies'. Podemos agora manuze√°-las.
}

interface Challenge { // typagem do Challenge (propriedades do 'challenges.json')
  type: 'body' | 'eye';
  description: string;
  amount: number;
}

/* Outra √© facilitarmos o acesso as informa√ß√µes de dentro do contexto, especificando o tipo de 
cada uma delas (tipagem) */

interface ChallengesContextData {
  level: number;
  currentExperience: number; // experi√™ncia do usu√°rio
  experienceToNextLevel: number; // experi√™ncia para o pr√≥ximo n√≠vel
  challengesCompleted: number; // n√∫mero de desafios completos
  activeChallenge: Challenge; // se existe um desafio ativo ou n√£o
  levelUp: () => void; // fun√ß√£o n√£o recebe par√¢metro e tem retorno vazio
  startNewChallenge: () => void; 
  resetChallenge: () => void;
  completedChallenge: () => void;
  closeLevelUpModal: () => void;
}
/* dessa forma, devemos informar que nosso contexto ser√° do tipo 'ChallengesContextData' e quando 
formos us√°-lo no restante dos componentes, eles ter√£o acesso facilmente a cada uma dessas 
propriedades */

// ________________________________________________________________________________________________

export const ChallengesContext = createContext({} as ChallengesContextData); /* exporta√ß√£o do nosso 
contexto, sendo este do tipo 'ChallengesContextData', que foi o que criamos acima */

export function ChallengesProvider ({ 
  children, 
  ...rest // usada para abreviar todo o resto do conte√∫do de 'ChallengesProviderProps'
} : ChallengesProviderProps) { /* par√¢metro que 
queremos receber e o seu tipo */

  const [level, setLevel] = useState(rest.level ?? 1); /* criamos um estado que ir√° ser 
  respons√°vel pelo level // '??' significa que, se 'rest.level' n√£o existir, ele usa o 1 */
  const [currentExperience, setCurrentExperience] = useState(rest.currentExperience ?? 0); /* estado 
  respons√°vel pela experi√™ncia // '??' significa que, se '...' n√£o existir, ele usa o 0 */
  const [challengesCompleted, setChallengesCompleted] = useState(rest.challengesCompleted ?? 0); /* 
  estado respons√°vel pelos desafios completos // '??' significa que, se '...' n√£o existir, ele usa 
  o 0 */
  const [activeChallenge, setActiveChallenge] = useState(null); /* estado respons√°vel pelo challenge
  atual */
  const [isLevelUpModalOpen, setIsLevelUpModalOpen] = useState(false);

  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); /* calculo que os rpgs usam para 
  calcular a experi√™ncia do usu√°rio para o pr√≥ximo n√≠vel // o 4 √© o fator de dificuldade e o 2 √© 
  a pot√™ncia */

  useEffect(() => {
    Notification.requestPermission();
  }, []); /* disparador de efeitos colaterais // quando o 'useEffect' no segundo
  par√¢metro, recebe um array vazio, isso quer dizer que a fun√ß√£o ser√° executada apenas uma vez, 
  que √© quando o componente aparece em tela */

  useEffect(() => {
    Cookies.set('level', String(level));
    Cookies.set('currentExperience', String(currentExperience));
    Cookies.set('challengesCompleted', String(challengesCompleted));
  }, [level, currentExperience, challengesCompleted])
  /* disparador de efeitos colaterais // usamos o 'useEffect' para salvar nos nossos 'Cookies'
  sempre que 'level', 'currentExperience' ou 'challengesCompleted' muderem // 'level', recebe
  o nosso atributo 'level' como uma String, pois os 'Cookies' s√≥ aceitam Strings */

  function levelUp () { // fun√ß√£o de atribuir +1 level
    setLevel(level +1);
    setIsLevelUpModalOpen(true); // quando usu√°rio sobe de n√≠vel, 'setLevelUpModalOpen' fica true
  }

  function closeLevelUpModal () { // fun√ß√£o de fechar o 'LevelUpModal'
    setIsLevelUpModalOpen(false); // seta 'setLevelUpModal' como falso 
  }

  function startNewChallenge () {
    const randomChallengeIndex = Math.floor(Math.random() * challenges.length); /* 'randomChallengeIndex'
    √© o que recebe o n√∫mero gerado randomicamente. 'Math.floor' arredonda pra baixo, enquanto 
    'Math.random' vai de 0 a 1. Se quisermos que v√° de 0 at√© outra coisa, precisamos multiplicar 
    essa outra coisa, e neste caso, a quantidade de desafios. // Lembrando que em 'challenges.lenght',
    'challenges' √© referente ao nosso 'challenges.json' que cont√©m todos os desafios poss√≠veis */
    
    const challenge = challenges[randomChallengeIndex]; /* desafio referente ao index gerado 
    randomicamente referente ao nosso 'challenges.json' */

    setActiveChallenge(challenge); // desafio setado ao 'activeChallenge'

    new Audio('/notification.mp3').play(); // som de quando o desafio √© criado
    
    if (Notification.permission === 'granted') { // se a permiss√£o da notifica√ß√£o for 'granted'
      new Notification('Novo desafio! üéâ', { 
        body: `Valendo ${challenge.amount}xp!` /* 'Notification recebe dois par√¢metros, t√≠tulo e 
        corpo da notifica√ß√£o */
      }) 
    }
  } 
  
  function resetChallenge () { // fun√ß√£o respons√°vel por resetar o challenge para null 
    setActiveChallenge(null); // seta o challenge como null
  }

  function completedChallenge () { // fun√ß√£o respons√°vel por avisar que o desafio foi completo

    if (!activeChallenge) { // se 'activeChallenge' for null // valida√ß√£o 
      return; // retorna nada
    }

    const { amount } = activeChallenge; // pegando 'amount' de 'activeChallenge', q √© o challenge atual

    let finalExperience = currentExperience + amount; /* finalExperience √© a experi√™ncia final do 
    usu√°rio // √© o mesmo que 'currentExperience', por√©m criamos essa para poder alterar o valor */

    if (finalExperience >= experienceToNextLevel) { /* c√°lculo para caso a experi√™ncia para o pr√≥ximo 
    n√≠vel for ultrapassada */
      finalExperience = finalExperience - experienceToNextLevel;
      levelUp(); // aumenta de level
    }

    setCurrentExperience(finalExperience); // 'finalExperience' como novo valor de 'currentExperience'
    setActiveChallenge(null); // desafio atual passa a ser 'null'
    setChallengesCompleted(challengesCompleted + 1); // aumenta +1 em desafios completos

  }

  return (
    <ChallengesContext.Provider value={{
      level, 
      currentExperience,
      experienceToNextLevel,  
      challengesCompleted,
      activeChallenge, 
      levelUp, 
      startNewChallenge,
      resetChallenge,
      completedChallenge,
      closeLevelUpModal}}>  
    {children}
    {isLevelUpModalOpen && <LevelUpModal />}
  </ChallengesContext.Provider>
  )
}

/* quando usamos apenas '&&' em '{setLevelUpModalOpen && <LevelUpModal />}' √© uma forma de ter o 'if'
sem o else */


/* O '.Provider' faz com que todos os elementos presentes entre suas tags, possam acessar o contexto 
indicado. */
// 'value' s√£o o valor/valores que o nosso contexto retorna.
// 'children' s√£o os componentes que poder√£o ter acesso ao nosso contexto. Nesse caso, √© toda a app.
/* '{{level, currentExperience, ...}}' primeira chave informando que o que vir√° faz parte do js, e segunda, 
porque estamos retornando um objeto */
// colocamos o 'LevelUpModal' no 'ChallengesContext', porque √© a fun√ß√£o de 'levelUp' que faz ativ√°-lo
